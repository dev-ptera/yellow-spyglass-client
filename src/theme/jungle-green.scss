@use 'node_modules/@brightlayer-ui/colors/palette' as blui;
@use 'node_modules/@brightlayer-ui/colors-branding/palette' as branding;
@use 'node_modules/@angular/material' as mat;

@use 'node_modules/@brightlayer-ui/angular-themes/blui-component-theme' as blui-components-theme;
@use 'node_modules/@brightlayer-ui/angular-themes/blueTheme' as blui-light;
@use 'node_modules/@brightlayer-ui/angular-themes/fonts' as blui-fonts;
@use 'node_modules/@brightlayer-ui/angular-themes/common' as blui-common;

@use './typography' as appTypography;
@use 'src/app/pages/representatives/representatives.component' as representatives;
@use 'src/app/pages/network/network.component' as network;

@mixin navigationBar($primary) {
    .app-user-menu .blui-user-menu-avatar {
        color: map-get(blui.$blui-white, 50);
    }
    .mat-toolbar.mat-primary {
        background-color: $primary;
    }
    .blui-drawer .blui-drawer-nav-item-active-highlight {
        opacity: 0.1;
    }
    .navigation-app-bar {
        .navigation-toolbar-title,
        .mat-button,
        .nav-menu-trigger {
            color: map-get(blui.$blui-white, 50);
        }
        .mat-button,
        .nav-menu-trigger {
            &.active {
                border-bottom: solid 2px map-get(blui.$blui-white, 50);
                border-bottom-right-radius: 0;
                border-bottom-left-radius: 0;
            }
        }
    }
}

@mixin homePage($greenPalette, $foreground) {
    .mat-button:not([color]):hover:not(.mat-button-disabled) {
        background-color: rgb(31 179 46 / 41%);
    }
    .home-header-text {
        color: map-get(blui.$blui-white, 50);
    }
    .home-body {
        .home-search-hint {
            color: map-get(blui.$blui-white, 50);
            mat-icon {
                color: map-get(blui.$blui-white, 50);
            }
        }
        $placeholderTextColor: map-get($foreground, text);
        ::placeholder {
            /* Chrome, Firefox, Opera, Safari 10.1+ */
            color: $placeholderTextColor;
            opacity: 1; /* Firefox */
        }

        :-ms-input-placeholder {
            /* Internet Explorer 10-11 */
            color: $placeholderTextColor;
        }

        ::-ms-input-placeholder {
            /* Microsoft Edge */
            color: $placeholderTextColor;
        }
        .home-search-title {
            //  color: map-get(blui.$blui-white, 50);
        }
        .title {
            color: map-get($greenPalette, 500);
        }
        .mat-icon {
            color: map-get(blui.$blui-gray, 500);
        }
        .desc {
            color: map-get($foreground, secondary-text);
        }
        .stronger {
            color: map-get($foreground, text);
        }
        .summary-text {
            color: map-get(blui.$blui-white, 500);
        }
    }
}

@mixin accountPage($foreground, $background, $primary, $warn) {
    .tab-buttons button {
        color: map-get($foreground, secondary-text) !important;
        // background-color: map-get(blui.$blui-white, 200) !important;
        border-color: map-get($foreground, divider);
    }
    .tab-buttons .active {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
        //       background-color: map-get(blui.$blui-white, 50) !important;
        border-bottom: solid 2px $primary;
        color: $primary !important;
    }

    .tab-buttons:not(.sm) .active {
        background-color: map-get(blui.$blui-white, 50) !important;
    }

    .account-header {
        // background-color: map-get($background, card);
    }
    .tx-content-container {
        background-color: map-get(blui.$blui-white, 50);
    }
    .account-rep-offline {
        background-color: $warn;
    }
    .tab-transaction-list,
    .brpd-tab-transaction-list {
        .type {
            &.receive {
                background-color: rgba($primary, 0.05);
                border: solid 1px $primary;
                color: $primary;
                // color: map-get($foreground, secondary-text);
            }
            &.receivable {
                $receivable: map-get(blui.$blui-orange, 500);
                background-color: rgba($receivable, 0.05);
                border: solid 1px $receivable;
                color: $receivable;
            }
            &.send {
                background-color: rgba($warn, 0.05);
                border: solid 1px $warn;
                color: $warn;
            }
            &.change {
                $change: map-get(blui.$blui-blue, 500);
                background-color: rgba($change, 0.05);
                border: solid 1px $change;
                color: $change;
            }
            &.open {
                $open: map-get(blui.$blui-purple, 500);
                background-color: rgba($open, 0.05);
                border: solid 1px $open;
                color: $open;
            }
        }
    }
}

/* For use in src/lib/core/theming/_palette.scss */
$greenPalette: (
    50: #e5f1e6,
    100: #bdddc0,
    200: #92c696,
    300: #66af6c,
    400: #459e4d,
    500: #248d2d,
    600: #208528,
    700: #1b7a22,
    800: #16701c,
    900: #0d5d11,
    A100: #92ff95,
    A200: #5fff64,
    A400: #2cff32,
    A700: #13ff19,
    contrast: (
        50: #000000,
        100: #000000,
        200: #000000,
        300: #000000,
        400: #ffffff,
        500: #ffffff,
        600: #ffffff,
        700: #ffffff,
        800: #ffffff,
        900: #ffffff,
        A100: #000000,
        A200: #000000,
        A400: #000000,
        A700: #000000,
    ),
);

$material-theme-primary: mat.define-palette($greenPalette, 700);
$material-theme-accent: mat.define-palette(blui.$blui-yellow, 500);
$material-theme-warn: mat.define-palette(blui.$blui-red, 500);
$jungle-green-theme: map-merge(
    mat.define-light-theme($material-theme-primary, $material-theme-accent, $material-theme-warn),
    (
        foreground: (
            text: map-get(blui.$blui-black, 500),
            secondary-text: map-get(blui.$blui-gray, 500),
            hint-text: map-get(blui.$blui-black, 200),
            base: map-get(blui.$blui-darkBlack, 900),
            divider: rgba(66, 78, 84, 0.10),
            dividers: mat.get-color-from-palette(mat.$light-theme-foreground-palette, dividers),
            disabled: rgba(66, 78, 84, 0.3),
            disabled-button: rgba(black, 0.26),
            disabled-text: rgba(66, 78, 84, 0.3),
            elevation: map-get(blui.$blui-darkBlack, 900),
            icon: rgba(black, 0.54),
            icons: rgba(black, 0.54),
            slider-min: rgba(black, 0.87),
            slider-off: rgba(black, 0.26),
            slider-off-active: rgba(black, 0.38),
        ),
        background: (
            tooltip: map-get(blui.$blui-gray, 500),
            status-bar: mat.get-color-from-palette(mat.$light-theme-background-palette, status-bar),
            app-bar: map-get(blui.$blui-gray, 50),
            background: map-get(blui.$blui-white, 200),
            hover: rgba(black, 0.04),
            card: map-get(blui.$blui-white, 50),
            dialog: map-get(blui.$blui-white, 50),
            disabled-button: rgba(114, 126, 132, 0.12),
            raised-button: map-get(blui.$blui-white, 50),
            focused-button: mat.get-color-from-palette(mat.$light-theme-background-palette, focused-button),
            selected-button: map-get(blui.$blui-gray, 300),
            selected-disabled-button: map-get(blui.$blui-gray, 400),
            disabled-button-toggle: map-get(blui.$blui-gray, 200),
            unselected-chip: map-get(blui.$blui-gray, 300),
            disabled-list-option: map-get(blui.$blui-gray, 200),
        ),
    )
);

.jungle-green {
    @include mat.all-component-themes($jungle-green-theme);
    @include blui-components-theme.blui-components-theme($jungle-green-theme);
    @include blui-light.bluetheme($jungle-green-theme);
    @include blui-common.common();
    @include appTypography.typography();

    $theme-foreground: map-get($jungle-green-theme, foreground);
    $theme-background: map-get($jungle-green-theme, background);

    $primary: map-get($material-theme-primary, 700);
    $warn: map-get($material-theme-warn, 500);

    /** Common **/
    .sm {
        .mat-row:nth-child(even),
        .mat-row:nth-child(odd) {
            background-color: map-get(blui.$blui-white, 50);
        }
    }
    .mat-row:nth-child(even) {
        background-color: map-get(blui.$blui-white, 50);
    }
    .mat-row:nth-child(odd) {
        background-color: map-get(blui.$blui-white, 100);
    }
    .text {
        color: map-get($theme-foreground, text);
    }
    .text-secondary {
        color: map-get($theme-foreground, secondary-text);
    }
    .text-hint {
        color: map-get($theme-foreground, hint-text);
    }
    .primary {
        color: $primary;
    }
    .intermediary {
        color: map-get(blui.$blui-orange, 500);
    }
    .warn {
        color: $warn;
    }
    .divider-border {
        border: solid 1px map-get($theme-foreground, divider);
    }
    textarea:focus,
    input:focus {
        border-radius: 4px;
        border: solid 2px map-get($material-theme-accent, 500);
        outline: 0;
    }

    .ph-row div {
        background-color: #f5f5f5;
    }

    .original-block-content {
        background-color: map-get(blui.$blui-gray, 50);
    }

    $sticky-border-color: map-get(blui.$blui-black, 100);
    @include representatives.representatives-theme($sticky-border-color, #f1fff1);
    @include accountPage($theme-foreground, $theme-background, $primary, $warn);
    @include network.network-theme($theme-foreground);
    @include navigationBar($primary);
    @include homePage($greenPalette, $theme-foreground);
}
